name: Java CI with Gradle

on:
  push:  # 해당 브랜치에 push가 들어올 경우 workflow 실행
    branches: 
      - dev
      - stg

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'

    # build 권한 추가
    - name: Grant execute permission for gradlew 
      run: chmod +x ./gradlew

    # build
    - name: Build with Gradle Wrapper 
      run: ./gradlew build

    # file 이름 설정, 압축
    - name: Zip files
      run:
        tar -zcvf ./penguin-$(date "+%Y-%m-%d").tar.gz -C ./build/libs/ penguin..war
        
    # Google Cloud Service Account credential auth
    # - name: Google auth
    #   uses: google-github-actions/auth@v2
    #   with:
    #     credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

    # gcloud 명령어 사용을 위한 Google Cloud SDK 구성
    # - name: Set up Cloud SDK
    #   uses: google-github-actions/setup-gcloud@v2

    # 압축파일 google cloud storage로 전송

    # - name: Copy tar file to Cloud Storage
    #   run: gcloud storage cp ./communicator-$(date "+%Y-%m-%d").tar.gz gs://${{ secrets.BUCKET }}/${{ github.ref_name }}/

    
    # Jenkins 시작 이벤트 발생 조건
    # - name: trigger Jenkins job
    #   uses: appleboy/jenkins-action@master
    #   with:
    #     url: "${{ secrets.HOST }}"  # Jenkins URL
    #     user: "admin"  # Jenkins에서 job을 실행할 user
    #     token: ${{ secrets.JENKINSAPI }}  # Jenkins에서 user의 API Token
    #     job: "test"  # 시작할 job

    - name: scp file
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.KEY }}
        port: ${{ secrets.PORT }}
        source: "./penguin-*.tar.gz"
        target: "/home/${{ secrets.USERNAME }}/"
        # strip_components: 1
